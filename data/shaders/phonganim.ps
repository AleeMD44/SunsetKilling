varying vec3 Normal;
varying vec3 Vertex;
uniform float shininessVal;
uniform vec3 ka,ks,kd,ia,id,is,lightPos,eyePos;
varying vec4 v_color;
varying vec2 v_uv;
uniform sampler2D u_texture;
void main(void) {
  vec3 Normal = normalize(Normal);
  vec3 LightVec = normalize(lightPos - Vertex);
  vec2 uv = v_uv;
  vec4 color = texture2D( u_texture, uv );
  // Lambert's cosine law
  float lambertian = max(dot(Normal, LightVec), 0.0);
  float specular = 0.0;
      if(lambertian > 0.0) {
        vec3 RefLightVec = reflect(-LightVec, Normal);      // Reflected light vector
        vec3 ViewerVec = normalize(eyePos-Vertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(RefLightVec, ViewerVec), 0.0);
        specular = pow(specAngle, shininessVal);
      }
  gl_FragColor = vec4(ka * ia + kd * lambertian * id + ks * specular * is * color.w , 1.0);
 

  gl_FragColor *= color;
}